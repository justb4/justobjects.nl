<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ogc on Clarity</title>
    <link>https://nl.justobjects.org/tags/ogc/</link>
    <description>Recent content in ogc on Clarity</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Copyright © 2008–2018, Steve Francia and the Hugo Authors; all rights reserved.</copyright>
    <lastBuildDate>Fri, 31 May 2019 23:33:35 +0000</lastBuildDate><atom:link href="https://nl.justobjects.org/tags/ogc/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Second Time Around – WFS v3 and pygeoapi</title>
      <link>https://nl.justobjects.org/2nd-time-around-wfs-v3-pygeoapi/</link>
      <pubDate>Fri, 31 May 2019 23:33:35 +0000</pubDate>
      
      <guid>https://nl.justobjects.org/2nd-time-around-wfs-v3-pygeoapi/</guid>
      <description>
        
          &lt;p&gt;TLDR;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;tired of the OGC WFS/GML/INSPIRE complexity mess&lt;/li&gt;
&lt;li&gt;new spirit from &lt;a href=&#34;https://github.com/opengeospatial/WFS_FES&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;WFS v3 standard&lt;/a&gt;
 and OGC REST API movement&lt;/li&gt;
&lt;li&gt;title of this blog refers (YouTube): &lt;a href=&#34;https://www.youtube.com/watch?v=xz4YQZ01Q_A&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Shalamar, The Second Time Around&lt;/a&gt;
.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://pygeoapi.io/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;pygeoapi&lt;/a&gt;
 implements OGC REST APIs in Python&lt;/li&gt;
&lt;li&gt;I joined &lt;a href=&#34;https://pygeoapi.io/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;pygeoapi&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://pygeoapi.io/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;pygeoapi&lt;/a&gt;
 can unlock/proxy existing WFS v1,v2 and any OGR Source!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;About 10 years ago, working on my first serious geospatial contract at &lt;a href=&#34;https://www.kadaster.nl/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Dutch Kadaster&lt;/a&gt;
, I was asked to investigate an emerging &lt;a href=&#34;http://www.opengeospatial.org/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;OGC&lt;/a&gt;
 standard called “WFS”, &lt;a href=&#34;https://en.wikipedia.org/wiki/Web_Feature_Service&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Web Feature Service&lt;/a&gt;
. Providing a matrix of client-server interoperability was one of the expected outcomes. That is: which WFS-clients will happily fetch data from WFS server-products. I don’t have the actual outcome anymore, but I can recall: it was a very empty table: there were a few WFS server-implementations at the time: GeoServer, MapServer and deegree and some WFS clients, both Open Source and proprietary. In my recollection, only OpenLayers would interwork with the above three WFS servers. The rest had various interworking issues: around &lt;a href=&#34;https://epsg.io/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;EPSG&lt;/a&gt;
-encoding (three possible encodings!) and other vague GML issues. In short, it was a mess: remember, all we wanted to exchange were flat, table-like &lt;a href=&#34;https://www.opengeospatial.org/standards/sfa&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Simple Features:&lt;/a&gt;
 records with attributes and a single geometry (Point, Line, Polygon).&lt;/p&gt;
&lt;p&gt;Later on, things became even worse: multiple WFS and GML versions. And not to mention &lt;a href=&#34;https://en.wikipedia.org/wiki/Geography_Markup_Language&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;GML Application Schemas&lt;/a&gt;
 like for &lt;a href=&#34;http://inspire.ec.europa.eu/applicationschema&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;INSPIRE&lt;/a&gt;
. Plenty of work for WFS/GML experts, which I was considered one, but I felt cynical at some point. From my background as a software engineer at &lt;a href=&#34;https://en.wikipedia.org/wiki/Bell_Labs&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;AT&amp;amp;amp;T/Lucent/Bell Labs&lt;/a&gt;
, where I developed embedded software for the public &lt;a href=&#34;https://en.wikipedia.org/wiki/5ESS_Switching_System&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;5ESS telephone exchange&lt;/a&gt;
, &lt;strong&gt;&lt;em&gt;over-engineering was considered bad practice&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Also from the perspective of the emerging &lt;a href=&#34;https://agilemanifesto.org/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Agile movement&lt;/a&gt;
: &lt;strong&gt;&lt;em&gt;“make the simplest thing that could possibly work”&lt;/em&gt;&lt;/strong&gt;, this WFS/GML ‘beast’ seemed untamable, driven by theoreticians who modeled the geospatial world from behind UML tools like &lt;a href=&#34;https://sparxsystems.com/products/ea/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Enterprise Architect&lt;/a&gt;
. I attended numerous meetings between Dutch government organizations that had WFS/GML interworking problems. At some point I gave up: the intellectual challenges (and contracts!) were alluring, but the (geospatial) world wouldn’t progress like this. Though I used WFS and GML in many of my apps, I had a love-hate relationship with them, as a rule-of-thumb only the lowest denominator, WFS v1 and GLM2 had the most chances to interwork.&lt;/p&gt;
&lt;p&gt;Until…back to the title of this blog. I grew up in the 70-s/80-s, so want to introduce this song. I hope the YouTube video below is embedded ok. Otherwise check out &lt;a href=&#34;https://www.youtube.com/watch?v=xz4YQZ01Q_A&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;this link from Shalamar, The Second Time Around&lt;/a&gt;
.&lt;/p&gt;

&lt;div class=&#34;video&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/xz4YQZ01Q_A?controls=1&amp;rel=0&#34; loading=&#34;lazy&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;Fast forward to 2019: we live in an API-world: REST, &lt;a href=&#34;https://swagger.io/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Swagger&lt;/a&gt;
, OpenApi. OGC became wiser: both in process and technology. Folks from the OSGeo Community, I must mention &lt;a href=&#34;https://medium.com/@cholmes&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Chris Holmes&lt;/a&gt;
 here, advocated/pushed for a more collaborative/development-like standardization process, e.g. using GitHub over Word documents. A landmark OGC/W3C study called &lt;a href=&#34;https://www.w3.org/TR/sdw-bp/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;“Spatial Data on the Web Best Practices”&lt;/a&gt;
 recommended a more web-friendly approach.&lt;/p&gt;
&lt;p&gt;Fast-fast forward, the above issues resulted in a brand new &lt;a href=&#34;https://github.com/opengeospatial/WFS_FES&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;WFS version 3 standard&lt;/a&gt;
 under development: using both GitHub and the latest REST (Open)API technologies. Forget about WFS v1 and v2, GML v.whatever, and OWS in general with their &lt;strong&gt;&lt;em&gt;tired GetCapabilities&lt;/em&gt;&lt;/strong&gt;, this is a new road taken. Kudos to &lt;a rel=&#34;noreferrer noopener&#34; aria-label=&#34; (opens in a new tab)&#34; href=&#34;https://medium.com/@cholmes&#34; target=&#34;_blank&#34;&gt;Chris Holmes&lt;/a&gt;, he words this better than me in this &lt;a href=&#34;https://medium.com/@cholmes/wfs-3-0-get-excited-yes-8e904fdbcc0&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Medium Article on WFS3&lt;/a&gt;
.&lt;/p&gt;
&lt;p&gt;So yes, what about this &lt;strong&gt;&lt;em&gt;Second Time Around?&lt;/em&gt;&lt;/strong&gt; Well I got attracted to WFS again (“in love” is not really appropriate for technology IMHO), for two reasons:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;the &lt;a href=&#34;https://github.com/opengeospatial/WFS_FES&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;WFS spec&lt;/a&gt;
 and the folks/energy around it&lt;/li&gt;
&lt;li&gt;Open Source implementation of this standard in Python: &lt;a href=&#34;https://pygeoapi.io/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;pygeoapi&lt;/a&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Python IMHO makes much much sense within the Open Source geospatial domain. For similar reasons as described above, like over-engineering (and Oracle!), I abandoned Java about 8 years ago.&lt;/p&gt;
&lt;p&gt;So I joined the &lt;a href=&#34;https://pygeoapi.io/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;pygeoapi&lt;/a&gt;
 project. Not out of any commercial interest, but mainly out of an developer’s itch: this is useful, let’s see how this works out, a now small, but great community, several from my country, to work with.&lt;/p&gt;
&lt;p&gt;About &lt;a href=&#34;https://pygeoapi.io/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;pygeoapi&lt;/a&gt;
: currently the project is focused on WFS v3, but in general we attempt to implement multiple OGC REST APIs. Also, the project provides a plugin architecture: via &lt;strong&gt;&lt;em&gt;Providers&lt;/em&gt;&lt;/strong&gt;, where data can be fetched from any backend: remote services or local files. Check out our &lt;a href=&#34;https://demo.pygeoapi.io/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;demo server&lt;/a&gt;
 which is updated constantly via the &lt;a href=&#34;https://github.com/geopython/pygeoapi&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;pygeoapi GitHub repo&lt;/a&gt;
 and &lt;a href=&#34;https://cloud.docker.com/u/geopython/repository/docker/geopython/pygeoapi/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;DockerHub&lt;/a&gt;
.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://nl.justobjects.org/uploads/2019/05/image.png&#34; alt=&#34; &#34;&gt;&lt;/p&gt;
&lt;!--
&lt;figure class=&#34;wp-block-image&#34;&gt;
&lt;img loading=&#34;lazy&#34; width=&#34;1024&#34; height=&#34;578&#34; src=&#34;https://justobjects.nl/wp-content/uploads/2019/05/image-1024x578.png&#34; alt=&#34;&#34; class=&#34;wp-image-886&#34; srcset=&#34;https://justobjects.nl/wp-content/uploads/2019/05/image-1024x578.png 1024w, https://justobjects.nl/wp-content/uploads/2019/05/image-300x169.png 300w, https://justobjects.nl/wp-content/uploads/2019/05/image-768x433.png 768w, https://justobjects.nl/wp-content/uploads/2019/05/image-150x85.png 150w, https://justobjects.nl/wp-content/uploads/2019/05/image.png 1200w&#34; sizes=&#34;(max-width: 1024px) 100vw, 1024px&#34; /&gt; &lt;/figure&gt;
--&gt;
&lt;p&gt;Diving a bit deeper, one of my first contributions to this project was to add an &lt;a href=&#34;https://github.com/geopython/pygeoapi/blob/master/pygeoapi/provider/ogr.py&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;OGRProvider&lt;/a&gt;
 that would fetch from any &lt;a href=&#34;https://gdal.org/drivers/vector/index.html&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;GDAL/OGR Vector source&lt;/a&gt;
, in particular a backend WFS. Partly from a vision: &lt;strong&gt;&lt;em&gt;“Let’s free all those tired WFS-es out there”&lt;/em&gt;&lt;/strong&gt;, but also practically: the Python GDAL/OGR bindings are so powerful, performant and reusable, saving lots of development time over developing specific Providers for GeoJSON, GeoPackage, SpatialLite, PostGIS, and even ESRI Shapefiles and FeatureServers. In theory, any OGR (Vector) Source can now be exposed via WFS v3 in &lt;a href=&#34;https://pygeoapi.io/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;pygeoapi&lt;/a&gt;
.&lt;/p&gt;
&lt;p&gt;There’s lots of movement around WFS v3 and OGC REST APIs in general, where both standards makers and implementors interact. Like the &lt;a href=&#34;https://www.opengeospatial.org/OGCAPI_Hack2019&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;OGC API Hackathon&lt;/a&gt;
 in June 2019, London (sold out now!). If you ever abandoned WFS v1/v2 it is time to reconcile now!&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Emit #6 – AirSensEUR Calibration</title>
      <link>https://nl.justobjects.org/emit-6-airsenseur-calibration/</link>
      <pubDate>Tue, 19 Feb 2019 16:23:52 +0000</pubDate>
      
      <guid>https://nl.justobjects.org/emit-6-airsenseur-calibration/</guid>
      <description>
        
          &lt;p&gt;This is Emit #6, in a &lt;a href=&#34;https://nl.justobjects.org/categories/smartemission/&#34;&gt;series of blog-posts around the Smart Emission Platform&lt;/a&gt;
, an Open Source software component framework that facilitates the acquisition, processing and (OGC web-API) unlocking of spatiotemporal sensor-data, mainly for Air Quality and other environmental sensor-data like noise.&lt;/p&gt;
&lt;p&gt;In &lt;a href=&#34;https://nl.justobjects.org/emit-5-assembling-and-deploying-5-airsenseurs/&#34;&gt;Emit #5 – Assembling and Deploying 5 AirSensEURs…&lt;/a&gt;
, I described how , with the great help of Jan Vonk from RIVM, we placed five &lt;a href=&#34;https://airsenseur.org/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;AirSensEUR&lt;/a&gt;
 (ASE) air quality stations at the RIVM reference site near the A2 Highway at Breukelen. For about 2.5 months raw data was gathered there while the RIVM station was gathering its data to be used as reference for calibration.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://nl.justobjects.org/uploads/2019/02/airsenseur-deploy-combined-s.jpg&#34; alt=&#34; &#34;&gt;&lt;/p&gt;
&lt;!--
&lt;img loading=&#34;lazy&#34; class=&#34;aligncenter  wp-image-864&#34; src=&#34;uploads/2019/02/airsenseur-deploy-combined-s-1024x537.jpg&#34; alt=&#34;&#34; width=&#34;555&#34; height=&#34;291&#34; srcset=&#34;https://justobjects.nl/wp-content/uploads/2019/02/airsenseur-deploy-combined-s.jpg 1024w, https://justobjects.nl/wp-content/uploads/2019/02/airsenseur-deploy-combined-s-300x157.jpg 300w, https://justobjects.nl/wp-content/uploads/2019/02/airsenseur-deploy-combined-s-768x403.jpg 768w, https://justobjects.nl/wp-content/uploads/2019/02/airsenseur-deploy-combined-s-150x79.jpg 150w&#34; sizes=&#34;(max-width: 555px) 100vw, 555px&#34; /&gt;
--&gt;
&lt;p&gt;Now “calibration” is a huge and increasingly important topic when using inexpensive sensors for measuring Air Quality. Within the Smart Emission project we have been applying &lt;a href=&#34;https://en.wikipedia.org/wiki/Artificial_neural_network&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Artificial Neural Networks&lt;/a&gt;
 to calibrate the gas-sensors within the Josene stations. See also the &lt;a href=&#34;https://smartplatform.readthedocs.io/en/latest/calibration.html&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;SE documentation&lt;/a&gt;
. These sensors were so called &lt;a href=&#34;https://sgx.cdistore.com/products/sgx-sensortech/metaloxide-gas-sensor&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;metaloxide (MICS) sensors from SGX Sensortech Limited&lt;/a&gt;
.&lt;/p&gt;
&lt;p&gt;The AirSensEURs contain &lt;a href=&#34;http://www.alphasense.com/index.php/safety/products/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;electrochemical sensors from AlphaSense&lt;/a&gt;
. Several sources like &lt;a href=&#34;https://www.samenmetenaanluchtkwaliteit.nl/sensoren-voor-no2&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;RIVM&lt;/a&gt;
, state that these sensors are more accurate (than metaloxide sensors), but at the same time need per-sensor calibration.&lt;/p&gt;
&lt;p&gt;Within the ASE boxes the following four gas-sensors were applied:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;NO2 (Nitrogen Dioxide): the &lt;a href=&#34;http://www.alphasense.com/index.php/products/nitrogen-dioxide/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;NO2-B43F&lt;/a&gt;
, see &lt;a href=&#34;http://www.alphasense.com/WEB1213/wp-content/uploads/2018/12/NO2B43F.pdf&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;datasheet&lt;/a&gt;
.&lt;/li&gt;
&lt;li&gt;NO (Nitric Oxide): the &lt;a href=&#34;http://www.alphasense.com/index.php/products/nitric-oxide-safety/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;NO-B4&lt;/a&gt;
, see &lt;a href=&#34;http://www.alphasense.com/WEB1213/wp-content/uploads/2015/03/NO-B4.pdf&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;datasheet&lt;/a&gt;
.&lt;/li&gt;
&lt;li&gt;O3 (Ozone): the &lt;a href=&#34;http://www.alphasense.com/index.php/products/ozone-2/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;OX_A431&lt;/a&gt;
, see &lt;a href=&#34;http://www.alphasense.com/WEB1213/wp-content/uploads/2018/12/OXA431.pdf&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;datasheet&lt;/a&gt;
.&lt;/li&gt;
&lt;li&gt;CO (Carbon Monoxide): the &lt;a href=&#34;http://www.alphasense.com/index.php/products/carbon-monoxide-safety/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;CO-A4&lt;/a&gt;
, see &lt;a href=&#34;http://www.alphasense.com/WEB1213/wp-content/uploads/2017/01/COA4.pdf&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;datasheet&lt;/a&gt;
.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://nl.justobjects.org/uploads/2018/08/asenl-unbox-assemble-deploy-12.jpg&#34; alt=&#34;The Gang of Four Sensors&#34;&gt;&lt;/p&gt;
&lt;!--
&lt;div id=&#34;attachment_790&#34; style=&#34;width: 358px&#34; class=&#34;wp-caption aligncenter&#34;&gt;
  &lt;img aria-describedby=&#34;caption-attachment-790&#34; loading=&#34;lazy&#34; class=&#34; wp-image-790&#34; src=&#34;uploads/2018/08/asenl-unbox-assemble-deploy-12-300x243.jpg&#34; alt=&#34;&#34; width=&#34;348&#34; height=&#34;282&#34; srcset=&#34;https://justobjects.nl/wp-content/uploads/2018/08/asenl-unbox-assemble-deploy-12-300x243.jpg 300w, https://justobjects.nl/wp-content/uploads/2018/08/asenl-unbox-assemble-deploy-12-768x623.jpg 768w, https://justobjects.nl/wp-content/uploads/2018/08/asenl-unbox-assemble-deploy-12.jpg 1024w, https://justobjects.nl/wp-content/uploads/2018/08/asenl-unbox-assemble-deploy-12-150x122.jpg 150w&#34; sizes=&#34;(max-width: 348px) 100vw, 348px&#34; /&gt;
  &lt;p id=&#34;caption-attachment-790&#34; class=&#34;wp-caption-text&#34;&gt;
    The Gang of Four Sensors
  &lt;/p&gt;
&lt;/div&gt;
--&gt;
&lt;p&gt;The calibration to be applied is based on &lt;a href=&#34;https://en.wikipedia.org/wiki/Regression_analysis&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Regression Analysis&lt;/a&gt;
. This and other calibration-methods have been investigated and evaluated for many types/brands of sensors by the EC-JRC team. Read all in this &lt;a href=&#34;https://www.sciencedirect.com/science/article/pii/S092540051500355X&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;landmark article&lt;/a&gt;
 and other references there. &lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://nl.justobjects.org/uploads/2019/02/field-calibration-article.png&#34; alt=&#34; &#34;&gt;&lt;/p&gt;
&lt;!--
&lt;img loading=&#34;lazy&#34; class=&#34;wp-image-862 aligncenter&#34; src=&#34;uploads/2019/02/field-calibration-article.png&#34; alt=&#34;&#34; width=&#34;404&#34; height=&#34;251&#34; srcset=&#34;https://justobjects.nl/wp-content/uploads/2019/02/field-calibration-article.png 665w, https://justobjects.nl/wp-content/uploads/2019/02/field-calibration-article-300x186.png 300w, https://justobjects.nl/wp-content/uploads/2019/02/field-calibration-article-150x93.png 150w&#34; sizes=&#34;(max-width: 404px) 100vw, 404px&#34; /&gt;
--&gt;
&lt;p&gt;The complete timeline was as follows. Each phase will be expanded below.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Aug 1, 2018 – Okt 9, 2018&lt;br&gt;
Raw ASE and RIVM reference data collection (Breukelen site)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Okt 10, 2018 – Nov 2, 2018&lt;br&gt;
All ASEs deployed at their target locations&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Nov/dec 2018&lt;br&gt;
Calibration performed by Michel Gerboles at the EC-JRC lab &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Jan 2019&lt;br&gt;
Calibration formulas implemented in Smart Emission (SE) platform&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Feb 2019&lt;br&gt;
All ASE calibrated gas-data continuously available via SE viewers/APIs&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Feb 2019&lt;br&gt;
Analysis of the calibration (&lt;a href=&#34;https://github.com/smartemission/docker-se-stetl/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;SE Python Stetl&lt;/a&gt;
) implementation results&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;ad 1)&lt;/strong&gt; The five ASE Boxes were mounted on a horizontal pole and connected to WIFI and current. As end-result all boxes were publishing their raw data to the SE InfluxDB Data Collector and were visible in the &lt;a href=&#34;https://data.smartemission.nl/grafana-dc/d/HVSBmbHmz/airsenseur-netherlands-deploy&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;SE Grafana raw data viewer&lt;/a&gt;
.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://nl.justobjects.org/uploads/2018/08/asenl-unbox-assemble-deploy-1.jpg&#34; alt=&#34;Configured for InfluxDB Data Push visualized via Grafana&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ad 2)&lt;/strong&gt; The picture below shows ASE_NL_01 (left above) through _05 clockwise at their deployment sites. ASE_03 and 04 (right below) were at a single location.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://nl.justobjects.org/uploads/2019/02/ase-nl-1-5-deployed.jpg&#34; alt=&#34; &#34;&gt;&lt;/p&gt;
&lt;p&gt;ASE_NL 01 was deployed at an RIVM site in Nijmegen. This allowed us to verify its calibration with different reference data as with which it was calibrated! See below.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://nl.justobjects.org/uploads/2019/02/deployment-map-s.jpg&#34; alt=&#34; &#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ad 3)&lt;/strong&gt; The calibration was performed by EC-JRC (M. Gerboles) using R and ShinyR webapp. All sources can be found in this &lt;a href=&#34;https://github.com/ec-jrc/airsenseur-calibration&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;EC-JRC GitHub repo&lt;/a&gt;
. This process is quite intricate and a bit hard to explain in the context of a blog-post paragraph. I’ll try a summary:&lt;/p&gt;
&lt;p&gt;Sensor values are digital readings (0..65535). This is effected by the electrical circuitry within each ASE, for optimal gain. To calculate back to mV and nA a per-sensor (brand+type) calculation is required first before applying any regression formula. A bit is explained in the image below.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://nl.justobjects.org/uploads/2019/02/readings-vref.jpg&#34; alt=&#34; &#34;&gt;&lt;/p&gt;
&lt;p&gt;The second outcome is a per-individual-sensor regression formula. This is for most sensors a linear equation. For O3 (OX_A431) the formula is polynomial, as O3 readings are influenced by NO2 concentration. Below is an example as later implemented in Python using &lt;a href=&#34;https://github.com/smartemission/docker-se-stetl/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;SE Stetl ETL&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://nl.justobjects.org/uploads/2019/02/calibration-formulae.jpg&#34; alt=&#34; &#34;&gt;&lt;/p&gt;
&lt;p&gt;The main three outcomes of the calibration are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the parameters for digital to nA calculation (per sensor brand+type)&lt;/li&gt;
&lt;li&gt;the linear (polynomial) equations for nA to concentration (ug/m3)&lt;/li&gt;
&lt;li&gt;the per-individual-sensor parameters (a0-a3)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://nl.justobjects.org/uploads/2019/02/scatterplots-asenl03.jpg&#34; alt=&#34; &#34;&gt;&lt;/p&gt;
&lt;p&gt;Above some scatterplots made for ASE Box 3 NO2 and O3.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ad 4)&lt;/strong&gt; Knowing all equations and their parameters from step 3 above, I attempted to integrate this in the continuous ETL within the Smart Emission Platform. Up to now the platform supported only a single sensor station type: the Intemo Jose(ne). As the platform is fed by harvesting raw data from a set of remote APIs provided by Data Collectors, it was relatively easy to add sensor(-station)-metadata and extend the Refiner ETL to apply calibration algorithms driven by that metadata. &lt;/p&gt;
&lt;p&gt;So for Josene stations the existing ANN calibration would still be applied, while for ASE stations per-sensor linear equations would be performed. All parameterization was already configurable using the &lt;a href=&#34;https://github.com/smartemission/docker-se-stetl/tree/mast&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Device, DeviceDefs, DeviceFuncs&lt;/a&gt;
 abstractions in the &lt;a href=&#34;https://github.com/smartemission/docker-se-stetl/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;SE Stetl implementation&lt;/a&gt;
. Recently, to allow stations that already send calibrated values, I introduced the &lt;a href=&#34;https://github.com/smartemission/docker-se-stetl/blob/master/smartem/devices/vanilla.py&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Vanilla Device&lt;/a&gt;
 starting with harvesting &lt;a href=&#34;https://luftdaten.info&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Luftdaten.info&lt;/a&gt;
 stations (more in a later post).&lt;/p&gt;
&lt;p&gt;The formula’s as applied in Python SE Stetl are as follows:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;STEP 1a - Digital to Voltage (V)
&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;V = (Ref - RefAD) + (Digital+1) /2^16 x 2 x RefAD
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;STEP 1b - Voltage (V) to Ampere (I) as Ri
&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;I = 10^9 V/(Gain x Rload)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;STEP 2 - Ampere (I) to concentration (ug/m3) - Example
&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;I=a0+a1*NO2+a2*T
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;==&amp;gt; NO2 = (I - a0 - a2 * T) / a1
&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;a0-a2 has specific values for each NO2-B43F sensor.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now that these formulas and their parameters were implemented, near-realtime values could be made visible in all SE apps (viewers) and APIs such as the &lt;a href=&#34;https://data.smartemission.nl/smartapp/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;SmartApp&lt;/a&gt;
 and the &lt;a href=&#34;https://data.smartemission.nl/heron/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Heron Viewer&lt;/a&gt;
.&lt;/p&gt;

&lt;div class=&#34;&#34;&gt;
  &lt;a href=&#34;https://data.smartemission.nl/smartapp/&#34;&gt;
    &lt;img class=&#34;lazy&#34;
      src=&#34;https://nl.justobjects.org/uploads/2019/02/smartapp-ase01-nijmegen.png&#34;
      alt=&#34;&#34; /&gt;
  &lt;/a&gt;
  
&lt;/div&gt;

&lt;p&gt;Within the Heron Viewer we can compare for example NO2, not only with Josene measurements, but also with official RIVM values.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://nl.justobjects.org/uploads/2019/02/heron1.png&#34; alt=&#34; &#34;&gt;&lt;/p&gt;
&lt;p&gt;Also the data is available through all &lt;a href=&#34;https://data.smartemission.nl/data&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;SE OGC APIs&lt;/a&gt;
, for example the &lt;a href=&#34;https://en.wikipedia.org/wiki/SensorThings_API&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;SensorThings API&lt;/a&gt;
.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ad 6)&lt;/strong&gt; The moment of truth! How well does the SE-based SE Stetl Python calibration results fit with the original RIVM values? One of the advantages of Data Harvesting (opposed to data push) is that we can switch back in time, i.e. restart harvesting from a given date. Harvesting and continuous calibration was restarted from august 1, 2018, the start of the calibration period at the RIVM station. Using a Grafana panel that displays both RIVM and SE-calculated values we can graphically see how well the data aligns.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://nl.justobjects.org/uploads/2019/02/breukelen-grafana.jpg&#34; alt=&#34; &#34;&gt;&lt;/p&gt;
&lt;p&gt;What we can see from the above image, is that visually the data aligns very well, here for NO2. The purple graph is the official RIVM measurement. Only station ASE NL 02 is not completely aligned.&lt;/p&gt;
&lt;p&gt;To also have some numeric proof and a more objective comparison, I dived in scatterplot and numerical analysis in Python. Apart from scatterplots that show calculated (Y) agains RIVM ref values (X) I calculated the &lt;a href=&#34;https://en.wikipedia.org/wiki/Coefficient_of_determination&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;“R-squared”&lt;/a&gt;
 and “slope” for fitting indicator values. This was also my first serious use of Python libs like Scipy, Pandas, Seaborn and Numpy (you’re never too old to become a data-scientist!).&lt;/p&gt;
&lt;p&gt;As all SE calibrated data is also stored in InfluxDB with RIVM refdata harvested from their SOS, it was easy to fetch values for the plots/calculations.&lt;/p&gt;
&lt;p&gt;Objectivity could be effected since station ASE NL 01 was finally deployed (okt 2018) in Nijmegen, also next to an RIVM station. So the calibration calculations from RIVM refdata in Breukelen could be compared to “Nijmegen”. The implementation for making these scatterplots can be found &lt;a href=&#34;https://github.com/smartemission/smartemission/tree/master/etl/calibration&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;here&lt;/a&gt;
. Lets look at some results, mainly for NO2, as I consider this one of the most important AQ indicator gasses.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://nl.justobjects.org/uploads/2019/02/nijm-ruy-no2-ASE_NL01-2018-12-25-2019-01-24.png&#34; alt=&#34; &#34;&gt;&lt;/p&gt;
&lt;p&gt;I like this image a lot as it shows an almost ideal alignment with an R2 of 0.976 and slope of almost 1. Mind: calibration was thus done at a very different site (about 80 km west) and AQ condition (highway) as the deployment (city street). &lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://nl.justobjects.org/uploads/2019/02/asenl01-se-pycal-plots.png&#34; alt=&#34; &#34;&gt;&lt;/p&gt;
&lt;p&gt;Above are plots for the other gasses as well. First row in Breukelen (no ref CO available in RIVM SOS), front row in Nijmegen. Only NO in Nijmegen is a bit problematic.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://nl.justobjects.org/uploads/2019/02/breuk-sw-no2-ASE_NL_All-2018-09-10-2018-10-09.png&#34; alt=&#34; &#34;&gt;&lt;/p&gt;
&lt;p&gt;To close off: this last image above shows NO2 fit at the Breukelen station for all five ASE boxes. Also quite good.&lt;/p&gt;
&lt;p&gt;What to conclude? First of all AirSensEUR is a major step forward in affordable accurate AQ sensing. We hope to expand the community.&lt;/p&gt;
&lt;p&gt;AlphaSense NO2 electrochemical sensors appear quite accurate, but calibration requires quite some effort, plus calibration formulas apply per individual sensor. Would automatic per-sensor ANN be less time-consuming and still accurate? Something I would like to investigate.&lt;/p&gt;
&lt;p&gt;The Smart Emission project and platform is still going strong, running within a Kubernetes Cloud maintained by Dutch Kadaster.&lt;/p&gt;
&lt;p&gt;Next emit will discuss how I integrated data from the amazing Luftdaten.info project for the municipality of Nijmegen.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Deploying Open Source Geospatial Software – Part 1: Challenges</title>
      <link>https://nl.justobjects.org/deploying-open-source-geospatial-1/</link>
      <pubDate>Fri, 10 Jun 2016 01:03:36 +0000</pubDate>
      
      <guid>https://nl.justobjects.org/deploying-open-source-geospatial-1/</guid>
      <description>
        
          &lt;p&gt;My blog has been quiet for some time. As many of us I’ve been busy doing projects, all involving Open Source Geo (OSGeo) software. Partly development, writing software, I love it, but also more and more in “what comes next”: deploying and maintaining “the application” with all of its dependencies. For this I have been using several “deployment strategies” I would like to share.  To be specific and for a TL;DR : over the years I went through custom compiles/installs, Debian/Ubuntu(GIS) package installation, writing Debian/RPM packages, using Puppet (not yet Chef), and now sitting on the &lt;a href=&#34;http://docker.com&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Docker&lt;/a&gt;
 of the Bay. For many this last sentence may be gibberish, so I will try to sketch some context first. Calling this blog &lt;em&gt;Part 1&lt;/em&gt; also hopefully keeps me attached to the subject and writing as I have very good news. But today, ‘helas’, the bad and the ugly.&lt;/p&gt;
&lt;p&gt;In terms of architecture I always prefer a “best-of-breed” selection of Open Source Geospatial (OSGeo) software components, rather than select a single platform/”Suite”. Nothing against Suites, this is a domain where  Open Source Geo providers, are, literally, “stacking up” against proprietary GIS providers. &lt;a href=&#34;http://boundlessgeo.com/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Boundless&lt;/a&gt;
, &lt;a href=&#34;http://www.geo-solutions.it/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;GeoSolutions&lt;/a&gt;
, &lt;a href=&#34;http://www.geomajas.org&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Geomajas&lt;/a&gt;
, to name a few, have great platforms you should check out.  Because I like to dive deep into open source geospatial technology, trying to contribute where possible, even &lt;a href=&#34;https://github.com/justb4&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;writing some myself&lt;/a&gt;
, and having experienced the pros and cons of each individual component, I tend to go for a best fit in a project. For example, for WMS/WFS I may apply &lt;a href=&#34;http://mapserver.org/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;MapServer&lt;/a&gt;
 or &lt;a href=&#34;http://geoserver.org&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;GeoServer&lt;/a&gt;
 or &lt;a href=&#34;http://deegree.org&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;deegree&lt;/a&gt;
, for web clients &lt;a href=&#34;http://openlayers.org&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;OpenLayers&lt;/a&gt;
 or &lt;a href=&#34;http://leaflet.org&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Leaflet.&lt;/a&gt;
 As for tiling, well, to be honest, nothing beats &lt;a href=&#34;http://MapProxy.org&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;MapProxy&lt;/a&gt;
. &lt;a href=&#34;http://gdal.org&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;GDAL&lt;/a&gt;
 , &lt;a href=&#34;http://qgis.org&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;QGIS&lt;/a&gt;
, &lt;a href=&#34;http://grass.org&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;GRASS&lt;/a&gt;
, &lt;a href=&#34;http://geonetwork-opensource.org/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;GeoNetwork&lt;/a&gt;
 or &lt;a href=&#34;http://pycsw.org/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;pycsw&lt;/a&gt;
, I could go on. I am a huge fan of each of these projects, standing on the shoulders of giants when using their products.  It depends on the project’s requirements what I choose.&lt;/p&gt;
&lt;p&gt;But going for a “best-of-breed” architecture, where a selection of Open Source Geospatial components is made, usually extended with custom software and configurations, creates challenges in deployment and maintenance. With the latter I mean: going into production (live) and maintaining the system for an N number of years through modifications and updates. “Getting it working” on a single system will often succeed, possibly after a great number of Google searches,  mailing list threads, then finally getting all components and dependencies installed, often by hand. In some cases even recompiling components, moving libraries, setting PATHs etc. At some point “it all works” but at the same time we enter the “don’t touch it”  phase. We have an “upgrading issue”, but doable on a single system/server.&lt;/p&gt;
&lt;p&gt;To worsen this situation: most professional IT-departments employ a multi-step deployment-strategy. There is not just a single system where the application runs, but several systems, each dedicated to, and named after their phase in deployment. For example, governmental projects within The Netherlands often deploy “OTAP”. &lt;a href=&#34;https://nl.wikipedia.org/wiki/OTAP&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;OTAP&lt;/a&gt;
 (in English &lt;a href=&#34;https://en.wikipedia.org/wiki/Development,_testing,_acceptance_and_production&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;DTAP&lt;/a&gt;
) stands for Development, Test, Acceptance, Production. These are, often rigorously, separated computing infrastructures (servers, clients). An application with all its dependencies has to be deployed sequentially on/through each of these phases, sometimes called “pillars” (Dutch: zuilen). In many cases a direct connection between these systems is blocked by the IT-department.  In the simplest case, we have a Test and Production system. Hence, our carefully handcrafted system will have a major challenge getting from one pillar to the next.  But I am not finished yet, we have the “tribal thing” going on in Open Source Geospatial software. Let me expand.&lt;/p&gt;
&lt;p&gt;Diversity is good. Also in software. Over the years Open Source Geospatial software has been developed using a plethora of programming languages. Each came with a variety of deployment systems. I am talking about Java, Python, JavaScript/NodeJS, C/C++, and recently Go. These languages usually have some kind of library and deployment technology. Take Java: for server side components we need to have an “J2EE Container”, in most cases Tomcat, and deploy &lt;em&gt;.war&lt;/em&gt; files (e.g. GeoServer or GeoNetwork). For Python and “CGI-able” components like MapServer, we may just need a CGI-server like Apache or Nginx.  Each of these products deploys in its own way, has its own method for maintaining its configuration and managing updates. In Dutch we call this a “Lappendeken”. The closest translation I found is a “patchwork”, that is to say a diverse deployment and maintenance system. Individual products may provide a “GUI” to manage configurations, stored in diverse ways, from single XML/YAML files to even databases. No way to manage these products in a uniform way. For an outsider, or a cynical proprietary GIS-provider, this all could be labeled, as “Open Source Geospatial (deployment) is a big mess”.&lt;/p&gt;
&lt;p&gt;So dear readers,  sketching this bag of problems, in a positive sense: challenges, how we go from here? As I indicated, there is good news. The answer, my friend, lies in _abstraction. _Abstraction is the way that software technology has always progressed: from machine instructions to assembly and programming languages, through data structures, objects and classes. To components and packages. Coupling and cohesion is another progressing force: maximizing cohesion (do one thing good) and minimizing coupling (reduce dependencies). All in all I have been finding solutions to the above problems using very accessible technologies. In the next two parts I hope to expand on these further as I am picking just two (Deployment Strategies) for now. The first is &lt;a href=&#34;https://wiki.debian.org/Packaging&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Debian Packaging&lt;/a&gt;
 (with some &lt;a href=&#34;https://puppet.com/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Puppet&lt;/a&gt;
), the second is &lt;a href=&#34;https://www.docker.com/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Docker&lt;/a&gt;
. In short: what to expect in my next two blogs (Part 2 and Part 3):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;Debian Packaging:&lt;/strong&gt;&lt;/em&gt; writing Debian packages to maintain software and configuration in a multi-step deployment environment&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;Docker:&lt;/strong&gt;&lt;/em&gt; building/maintaining Docker images but keep control (on host) over their configuration, state and functionality&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Also with some telling images, as these are lacking in this post!&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Unlocking Sensor Data – I’ll send an SOS to the world</title>
      <link>https://nl.justobjects.org/unlocking-sensor-data-sos/</link>
      <pubDate>Thu, 01 Oct 2015 00:42:56 +0000</pubDate>
      
      <guid>https://nl.justobjects.org/unlocking-sensor-data-sos/</guid>
      <description>
        
          &lt;p&gt;Revealing: the title refers, for the younger readers, to a great 1979-hit by The Police as expanded below. To be played at the loudest possible volume. If you don’t see anything here below try the YouTube link directly:&lt;/p&gt;

&lt;div class=&#34;video&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/MbXWrmQW-OE?controls=1&amp;rel=0&#34; loading=&#34;lazy&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;One of the main aspects that glues the OSGeo-world together are OGC-standards: WMS, WFS, WMTS, WCS and WPS are, at least for most insiders, not hollow acronyms. But who knows about and uses SOS? SOS stands for &lt;em&gt;“Sensor Observation Service”&lt;/em&gt;, &lt;a href=&#34;http://www.opengeospatial.org/standards/sos&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;an OGC standard&lt;/a&gt;
 within the elaborate framework of the &lt;a href=&#34;http://www.opengeospatial.org/projects/groups/sensorwebdwg&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;OGC SensorWeb Enablement&lt;/a&gt;
.  SOS provides a standard to publish (SOS-T) and request time-based (meta-) data, mostly from “Sensors”. Its convention is similar to WMS/WFS (GetCapabilities, DescribeSensor, GetObservation etc). Think of weather or air quality measurements over time.&lt;/p&gt;
&lt;p&gt;The Internet of &lt;a href=&#34;https://en.wikipedia.org/wiki/Internet_of_Things&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Things (IoT)&lt;/a&gt;
  is now gaining a strong momentum: &lt;em&gt;“The Internet of Things (IoT) is the network of physical objects or “things” embedded&lt;/em&gt; &lt;em&gt;with electronics, software, sensors, and network connectivity, which enables these  objects to collect and exchange data. The Internet of Things allows objects to be sensed and controlled remotely across existing network infrastructure, creating opportunities for more direct integration between the physical world and computer-based systems, and resulting in improved efficiency, accuracy and economic benefit Each thing is uniquely identifiable through its embedded computing system but is able to interoperate within the existing Internet infrastructure. Experts estimate that the IoT will consist of almost 50 billion  objects by 2020.” (&lt;a href=&#34;https://en.wikipedia.org/wiki/Internet_of_Things&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;from Wikipedia&lt;/a&gt;
).&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;So how will SOS and the generic &lt;a href=&#34;http://www.opengeospatial.org/projects/groups/sensorwebdwg&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;OGC SensorWeb Enablement&lt;/a&gt;
 will fit into this force? I really don’t know. For many of the OGC-standards like WMS, there are multiple implementations. For SOS  I know about just two: the &lt;a href=&#34;http://52north.org/communities/sensorweb/sos/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;52 North SOS&lt;/a&gt;
, and the &lt;a href=&#34;http://istsos.org/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;IstSOS&lt;/a&gt;
.  Both of these are powerful with their own strengths and limitations.&lt;/p&gt;
&lt;p&gt;I have worked successfully with the &lt;a href=&#34;http://52north.org/communities/sensorweb/sos/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;52 North SOS&lt;/a&gt;
 within a &lt;a href=&#34;http://sensors.geonovum.nl/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Dutch project on Air Quality&lt;/a&gt;
. All details are in &lt;a href=&#34;http://sospilot.readthedocs.org/en/latest/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;this online document.&lt;/a&gt;
 In essence we are (still) publishing and emitting Dutch National Air Quality data via a SOS server. At the same time, via GeoServer, using WMS-Time &lt;a href=&#34;http://sensors.geonovum.nl/heronviewer/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;via this web-client&lt;/a&gt;
. On the way I found that the OGC-SOS Standard is complex and quite cumbersome in its usage. 52 North has provided &lt;a href=&#34;http://sensorweb.demo.52north.org/sensorwebclient-webapp-stable/api-doc/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;a custom REST interface&lt;/a&gt;
 that appeals to be more usable. But SOS with its inner talk of “Procedures” and “Offerings” remains a Hot Potato.&lt;/p&gt;

&lt;div class=&#34;&#34;&gt;
  &lt;a href=&#34;http://sensors.geonovum.nl/heronviewer/&#34;&gt;
    &lt;img class=&#34;lazy&#34;
      src=&#34;https://nl.justobjects.org/uploads/2015/10/heron-viewer-o3-ts.jpg&#34;
      alt=&#34;&#34; /&gt;
  &lt;/a&gt;
  
&lt;/div&gt;

&lt;p&gt;So the broader question is more about the OGC SOS standard and the related &lt;a href=&#34;http://www.opengeospatial.org/projects/groups/sensorwebdwg&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;OGC SensorWeb Enablement&lt;/a&gt;
  : how we as an OSGeo-community think it should evolve within the expanding world of the IoT? My opinion is that we need to strive for more ease-of-use. SOS-as-standard is an academic challenge. A window to the future may be the OGC-effort initiated by Steve Liang: the SensorThings API not only provides a simplification from the original  &lt;a href=&#34;http://www.opengeospatial.org/projects/groups/sensorwebdwg&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;OGC SensorWeb Enablement&lt;/a&gt;
 but also a modern way of community-based cooperation of standards making via GtiHub: &lt;a href=&#34;http://ogc-iot.github.io/ogc-iot-api/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;http://ogc-iot.github.io/ogc-iot-api&lt;/a&gt;
. Time will tell, a message in a bottle will also eventually arrive.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>3D Geospatial – Open Standards – v0</title>
      <link>https://nl.justobjects.org/3d-geospatial-open-standards-v0/</link>
      <pubDate>Thu, 29 Jan 2015 14:06:51 +0000</pubDate>
      
      <guid>https://nl.justobjects.org/3d-geospatial-open-standards-v0/</guid>
      <description>
        
          &lt;p&gt;This is my evolving overview of 3D Geospatial Open Standards with a focus on web technology: services, HTML5, WebGL. These are notes I keep within &lt;a href=&#34;http://evernote.com&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Evernote&lt;/a&gt;
 as part of the 3D Geospatial Notebook whose public link is: &lt;a href=&#34;https://www.evernote.com/pub/justb4ever/3d-geospatial&#34;&gt;https://www.evernote.com/pub/justb4ever/3d-geospatial&lt;/a&gt;. For sure, resources are missing, let me know. These notes are synced from Evernote using &lt;a href=&#34;http://zapier.com&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Zapier&lt;/a&gt;
, so formatting is a bit messy, sorry for that, though I completely revised this blog on Jan 30, 2015.&lt;/p&gt;
&lt;p&gt;The presentations by &lt;a href=&#34;https://twitter.com/emmanuel_belo&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Emanuel Belo&lt;/a&gt;
 (&lt;a href=&#34;http://www.camptocamp.com/en/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Camp2Camp&lt;/a&gt;
, links below) are an excellent start to get a global overview. He mentions the following categories of 3D standards and their organizations:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Geo: OGC&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;3D Portrayal Services (Proposals: WVS WMS-Like &amp;amp; W3DS WFS-Like) (Just: Now 3DPS)&lt;/li&gt;
&lt;li&gt;KML – XML/COLLADA&lt;/li&gt;
&lt;li&gt;CityGML – representation, storage, and exchange&lt;/li&gt;
&lt;li&gt;CZML (AGI/Cesium) ?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Geo: OSGeo&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;TMS (Cesium Terrain Server z.B)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Web: Web3d&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt; X3D – Extensible 3D Graphics&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Graphics: Khronos Group&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;COLLADA – eXchange / interoperability&lt;/li&gt;
&lt;li&gt;glTF – graphic language Transmission Format&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Other&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;TopoJSON&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In the short time I am spending within the 3D domain I think another categorization could be 3D Web Services Standards and 3D Content/Format Standards. A lot of focus is usually on the latter. Within 3D Content/Format Standards my view is that there are the sub-categories based on stages within a 3D rendering pipeline, i.e. from raw source data like CityGML up to 3D-scene encodings like COLLADA and glTF. I see “Terrain” as a separate content category with encodings like height maps and TINs.&lt;/p&gt;
&lt;p&gt;I think/hope that 3D Web Services will gain importance: services to request Content in various encodings plus Terrain data. Techniques like tiling (TMS/WMTS) are already very common within the geospatial world. With the latest developments in vector-tiling I see much potential, especially for terrain and textures (raster) draped on a terrain. Streaming as in video streaming, is not common within the geospatial world but may become of use especially in HTML5 apps (via web sockets?).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;General&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The following presentations by Emanuel Belo from Camp2Camp hit the nail on the head. The content lives up to the title.&lt;/p&gt;
&lt;p&gt;Two versions available, video and slides from FOSS4G 2013, Nottingham (missed that unfortunately) and a later 2014 version.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=9CgU0zs8DlU&#34;&gt;https://www.youtube.com/watch?v=9CgU0zs8DlU&lt;/a&gt; 3D Web Services And Models For The Web: Where Do We Stand? Belo FOSS4G13&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.slideshare.net/camptocamp/3-d-web-services-and-models-for-the-web&#34;&gt;http://www.slideshare.net/camptocamp/3-d-web-services-and-models-for-the-web&lt;/a&gt; Belo – ditto slides [1]&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.geospatialworldforum.org/2014/presentation/geo3d/Emmanuel%20Belo%20M.pdf&#34;&gt;http://www.geospatialworldforum.org/2014/presentation/geo3d/Emmanuel%20Belo%20M.pdf&lt;/a&gt; Belo – ditto 2014 version slides&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Open Geospatial Consortium – OGC&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;For open geospatial standards the Open Geospatial Consortium, OGC, is the first standards body to look at. Their standards&lt;br&gt;
are often aligned with corresponding ISO standards and more recently OGC started collaborating more closely with W3C.&lt;/p&gt;
&lt;p&gt;At least two Standards Working Groups (WSGs) are dedicated to 3D. The more established 3D Information Management (3DIM, CityGML!)) and the probably lesser known 3D Portrayal SWG.&lt;/p&gt;
&lt;p&gt;It should be noted and credited that most of the OGC 3D standards came out of the German &lt;a href=&#34;http://www.gdi-3d.de&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;GDI-DE&lt;/a&gt;
 project.&lt;br&gt;
At this moment (Jan 2015) two main OGC standards are of importance for 3D: CityGML and the draft standard for 3D Portrayal web services: 3DPS.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;OGC – 3D Information Modeling – CityGML&lt;/strong&gt;&lt;/em&gt;&lt;br&gt;
&lt;em&gt;“CityGML is a common information model and XML-based encoding for the representation, storage, and exchange of virtual 3D city and landscape models. CityGML provides a standard model and mechanism for describing 3D objects with respect to their geometry, topology, semantics and appearance, and defines five different levels of detail. Included are also generalization hierarchies between thematic classes, aggregations, relations between objects, and spatial properties. CityGML is highly scalable and datasets can include different urban entities supporting the general trend toward modeling not only individual buildings but also whole sites, districts, cities, regions, and countries.”&lt;/em&gt;&lt;br&gt;
&lt;a href=&#34;http://www.citygml.org&#34;&gt;http://www.citygml.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;SWG: &lt;a href=&#34;http://www.opengeospatial.org/projects/groups/3dimwg&#34;&gt;http://www.opengeospatial.org/projects/groups/3dimwg&lt;/a&gt; – 3D Information Management (3DIM) Domain Working Group&lt;br&gt;
CityGML: &lt;a href=&#34;http://www.opengeospatial.org/standards/citygml&#34;&gt;http://www.opengeospatial.org/standards/citygml&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;OGC candidate 3D Standards | GeoConnexion&lt;br&gt;
&lt;a href=&#34;http://www.geoconnexion.com/articles/ogc-candidate-3d-standards&#34;&gt;http://www.geoconnexion.com/articles/ogc-candidate-3d-standards&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;http://www.w3ds.org/doku.php&#34;&gt;http://www.w3ds.org/doku.php&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;OGC – 3D Web Services – 3D Portrayal&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;SWG: &lt;a href=&#34;http://www.opengeospatial.org/projects/groups/3dpswg&#34;&gt;http://www.opengeospatial.org/projects/groups/3dpswg&lt;/a&gt; – 3D Portrayal SWG.&lt;br&gt;
Note the W3DS, WVS, WTS and WPVS are now all obsolete since they have been merged into a single web service standard: the 3D Portrayal Service (3DPS).&lt;/p&gt;
&lt;p&gt;A draft version 1.0.0 is now (January 2015) out for public comment within OGC:&lt;br&gt;
&lt;a href=&#34;http://www.opengeospatial.org/standards/requests/130&#34;&gt;http://www.opengeospatial.org/standards/requests/130&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;“The 3D portrayal standard (3DPS) is an OGC service implementation specification targeting the delivery of 3D portrayals in an interoperable fashion. … When client and server(s) involved share a common set of capabilities, it becomes possible to view and analyze 3D geoinformation from diverse sources in a combined manner. …. The 3DPS combines the essential parts of the suggested W3DS and WVS into one common interface.”&lt;/em&gt; and&lt;/p&gt;
&lt;p&gt;&lt;em&gt;“ The Open Geospatial Consortium (OGC) and the Web3D Consortium have both been working to address the need for interoperability, as well as the content challenges of volume, access speed, and diversity of devices. The Web3D Consortium has focused on open standards for real-time 3D visualization, including streaming, and their members developed a Geospatial Component extension for X3D. The OGC has focused on developing a service interface to provide interoperable access to 3D geospatial data servers. In 2012, a group of OGC members, building on work done in both organizations, completed the 3D Portrayal Interoperability Experiment (3DPIE) to develop and evaluate best practices for 3D portrayal services.”&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;“The candidate OGC 3D Portrayal Service Standard is designed to support both client and server side rendering. For client-side rendering, the client requests a 3D model from the server. The server extracts the requested model from the 3D geodata server and generates a 3D scene graph including geometry and textures. Depending on the server’s capabilities, data formats such as X3D, KML and COLLADA can be used to retrieve the scene graph. The rendering of the scene is done on the client side. In a web client, X3DOM and/or XML3D can be used to integrate the scene into an immersive HTML5 experience. However, there are no fixed format requirements, opening the service for other technologies such as JSON-based glTF. For server side rendering, the client passes the requested content and view parameters to the server. The server then generates layered image depictions of the 3D environment for display on the client. In either scenario, the client’s user can query and navigate through the 3D content.”&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Link to 3DPS v1.0.0 for public review on jan 29, 2015:&lt;/p&gt;
&lt;p&gt;Public comment request: &lt;a href=&#34;http://www.opengeospatial.org/standards/requests/130&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://www.opengeospatial.org/standards/requests/130&#34;&gt;http://www.opengeospatial.org/standards/requests/130&lt;/a&gt;&lt;/a&gt;&lt;br&gt;
Direct download 3DPS 1.0.0 draft: &lt;a href=&#34;https://portal.opengeospatial.org/files/61884&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;https://portal.opengeospatial.org/files/61884&#34;&gt;https://portal.opengeospatial.org/files/61884&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;For history reasons some notes kept on W3DS and WVS below.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;A &lt;strong&gt;Web 3D Service (W3DS)&lt;/strong&gt; is a portrayal service for three-dimensional geodata such as landscape models, city models, textured building models, vegetation objects, and streetfurniture. Geodata is delivered as scenes that are comprised of display elements, optimized for efficient real time rendering at high frame rates. 3D Scenes can be interactively displayed and explored by internet browsers with 3D plug-ins, or loaded into virtual globe applications.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;The &lt;strong&gt;Web View Service (WVS)&lt;/strong&gt; is a portrayal service for three-dimensional geodata suchas landscape models, city models, vegetation models, or transportation infrastructure models. A WVS server mainly provides 2D image representing a 3D view on a scene constructed from 3D geodata that is integrated and visualized by the WVS server. In addition to these color images of a 3D scene, a WVS server can advertise and deliver complementary image layers that include geometrical or thematic information: e.g., depth layers, surface normal data, or object id information.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;OGC – 3D Portrayal Interoperability Experiment (3DPIE)&lt;/strong&gt;&lt;/em&gt;&lt;br&gt;
The OGC …. &lt;em&gt;“3D Portrayal Interoperability Experiment (IE) successfully tested and demonstrated different mechanisms for the portrayal, delivery, and exploitation of 3D geodata based on open standards-based formats and services. …approaches for service-based 3D portrayal based on thedrafts for the candidate standards for 3D portrayal, Web 3D Service (W3DS) and WebView Service (WVS).”&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Page: &lt;a href=&#34;http://www.opengeospatial.org/projects/initiatives/3dpie&#34;&gt;http://www.opengeospatial.org/projects/initiatives/3dpie&lt;/a&gt;&lt;br&gt;
Report: &lt;a href=&#34;https://portal.opengeospatial.org/files/?artifact_id=49068&#34;&gt;https://portal.opengeospatial.org/files/?artifact_id=49068&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;NB this ultimately lead to the development of the 3D Portrayal Standard which merged W3DS and WVS.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Open Source Geospatial Foundation – OSGeo&lt;/strong&gt;&lt;br&gt;
Although &lt;a href=&#34;http://osgeo.org&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;OSGeo.org&lt;/a&gt;
 is not a standards body, for years the Tiled Map Service TMS spec is intensively used, probably more than its OGC-counterpart WMTS…&lt;br&gt;
&lt;a href=&#34;http://wiki.osgeo.org/wiki/Tile_Map_Service_Specification&#34;&gt;http://wiki.osgeo.org/wiki/Tile_Map_Service_Specification&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;TMS is finding its use in the 3D landscape not just for tiles containing 2D raster maps to be draped over a terrain, but also more and more as a container for height and (compressed) vector tiles. This is an important development, see e.g. Cesium Terrain Server and its two format-encodings for terrain-tiles:&lt;br&gt;
&lt;a href=&#34;https://github.com/AnalyticalGraphicsInc/cesium/wiki/Cesium-Terrain-Server&#34;&gt;https://github.com/AnalyticalGraphicsInc/cesium/wiki/Cesium-Terrain-Server&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;X3D – Web3D&lt;/strong&gt;&lt;br&gt;
&lt;em&gt;“Extensible 3D (X3D) Graphics and Humanoid Animation (H-Anim) include a coordinated set of steadily evolving ISO standards. “&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.web3d.org/standards&#34;&gt;http://www.web3d.org/standards&lt;/a&gt; (mostly X3D, equiv with ISO/IEC 19775 (architecture and abstract capabilities), 19776 (encodings), and 19777 (API)))&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;X3DOM&lt;/strong&gt;&lt;br&gt;
&lt;em&gt;“X3DOM is an adaption of the X3D standard to (X)HTML, ensuring declarative 3D can&lt;/em&gt;&lt;br&gt;
&lt;em&gt;be used inside standards-compliant browser. It aims to support a large browser base and&lt;/em&gt;&lt;br&gt;
&lt;em&gt;decent X3D feature coverage, while working towards a common declarative 3D standard&lt;/em&gt;&lt;br&gt;
&lt;em&gt;in the Declarative 3D community WG at the W3C. The reference implementation is&lt;/em&gt;&lt;br&gt;
&lt;em&gt;maintained by Fraunhofer IGD and available under the open-source license MIT.”&lt;/em&gt;&lt;br&gt;
&lt;a href=&#34;http://www.x3dom.org/&#34;&gt;http://www.x3dom.org/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;WebGL&lt;/strong&gt;&lt;br&gt;
&lt;a href=&#34;https://www.khronos.org/webgl/&#34;&gt;https://www.khronos.org/webgl/&lt;/a&gt;&lt;br&gt;
&lt;em&gt;“WebGL is a standard for programming in 3D with the browser as platform. The final&lt;/em&gt;&lt;br&gt;
&lt;em&gt;specification of the standard was published in 2010 and is defined by the Khronos Group,&lt;/em&gt;&lt;br&gt;
&lt;em&gt;a consortium which is also in charge of Open GL, Open CL and OpenGL ES (embedded&lt;/em&gt;&lt;br&gt;
&lt;em&gt;systems). WebGL provide a context into HTML5 canvas that is 3D Computer Graphics&lt;/em&gt;&lt;br&gt;
&lt;em&gt;capable without plug-in.”&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Cesium&lt;/strong&gt;&lt;br&gt;
Although &lt;a href=&#34;http://cesiumjs.org&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;CesiumJS&lt;/a&gt;
 is mainly a client JavaScript framework based on WebGL and Dojo,  some very useful standards are originating from the project.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://cesiumjs.org/data-and-assets/terrain/formats/quantized-mesh-1.0.html&#34;&gt;http://cesiumjs.org/data-and-assets/terrain/formats/quantized-mesh-1.0.html&lt;/a&gt; quantized mesh via TMS – for terrain services based on TINs.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/AnalyticalGraphicsInc/cesium/wiki/CZML-Guide&#34;&gt;https://github.com/AnalyticalGraphicsInc/cesium/wiki/CZML-Guide&lt;/a&gt; – CZML is a JSON schema for describing a time-dynamic graphical scene&lt;/p&gt;
&lt;p&gt;NEW (august 2015) &lt;em&gt;&lt;strong&gt;“3D Tiles”&lt;/strong&gt;&lt;/em&gt; : &lt;a href=&#34;https://cesiumjs.org/2015/08/10/Introducing-3D-Tiles&#34;&gt;https://cesiumjs.org/2015/08/10/Introducing-3D-Tiles&lt;/a&gt;. &lt;em&gt;“3D Tiles are an &lt;a href=&#34;https://github.com/AnalyticalGraphicsInc/3d-tiles&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;open specification&lt;/a&gt;
 for streaming massive heterogeneous 3D geospatial datasets….3D Tiles define a spatial data structure and a set of tile formats designed for 3D and optimized for streaming and rendering. Tiles for 3D models use &lt;a href=&#34;https://www.khronos.org/gltf&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;glTF&lt;/a&gt;
, the WebGL runtime asset format developed by Khronos, which the Cesium team heavily contributes to….”&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Collada&lt;/strong&gt;&lt;br&gt;
&lt;em&gt;“COLLADA™ defines an XML-based schema to make it easy to transport 3D assets between applications – enabling diverse 3D authoring and content processing tools to be combined into a production pipeline. The intermediate language provides comprehensive encoding of visual scenes including: geometry, shaders and effects, physics, animation, kinematics, and even multiple version representations of the same asset.COLLADA FX enables leading 3D authoring tools to work effectively together to create shader and effects applications and assets to be authored and packaged using OpenGL® Shading Language, Cg, CgFX, and DirectX® FX.”&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.khronos.org/collada/&#34;&gt;https://www.khronos.org/collada/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;KML&lt;/strong&gt;&lt;br&gt;
Originally from Keyhole/Google, but since years an OGC Standard. May embed Collada.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;“Keyhole Markup Language (KML) is an XML notation for expressing geographic annotation and visualization within Internet-based, two-dimensional maps and three-dimensional Earth browsers. KML was developed for use with Google Earth, which was originally named Keyhole Earth Viewer. It was created by Keyhole, Inc, which was acquired by Google in 2004. KML became an international standard of the Open Geospatial Consortium in 2008.[1][2] Google Earth was the first program able to view and graphically edit KML files. “&lt;/em&gt;&lt;br&gt;
Source: &lt;a href=&#34;http://en.wikipedia.org/wiki/Keyhole_Markup_Language&#34;&gt;http://en.wikipedia.org/wiki/Keyhole_Markup_Language&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;OGC Standard: &lt;a href=&#34;http://www.opengeospatial.org/standards/kml&#34;&gt;http://www.opengeospatial.org/standards/kml&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;3D in KML:&lt;/strong&gt;&lt;/em&gt;&lt;br&gt;
&lt;a href=&#34;https://developers.google.com/kml/documentation/models&#34;&gt;https://developers.google.com/kml/documentation/models&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;http://blog.thematicmapping.org/2008/04/proportional-3d-collada-objects-in-kml.html&#34;&gt;http://blog.thematicmapping.org/2008/04/proportional-3d-collada-objects-in-kml.html&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;http://blog.thematicmapping.org/2008/04/drawing-3d-bars-in-kml.html&#34;&gt;http://blog.thematicmapping.org/2008/04/drawing-3d-bars-in-kml.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;glTF&lt;/strong&gt;&lt;br&gt;
Final stage OpenGL Transmission Format to enable rapid delivery and loading of 3D content by WebGL, OpenGL, and OpenGL ES APIs.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;“The “glTF” project aims to define a final stage OpenGL Transmission Format to enable rapid delivery and loading of 3D content by WebGL, OpenGL, and OpenGL ES APIs. glTF together with COLLADA comprise a standards-based content pipeline for rich 3D web and mobile applications. glTF Specification is a work-in-progress from the COLLADA Working Group; it is not an official Khronos-ratified specification yet. It is incomplete and subject to change. The draft specification and related converters and loaders are available on github.”&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.khronos.org/&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;https://www.khronos.org/&#34;&gt;https://www.khronos.org/&lt;/a&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;https://www.khronos.org/gltf/&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;https://www.khronos.org/gltf/&#34;&gt;https://www.khronos.org/gltf/&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;TopoJSON&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;“TopoJSON is an extension of GeoJSON that encodes topology. Rather than representing geometries discretely, geometries in TopoJSON files are stitched together from shared line segments called arcs. TopoJSON eliminates redundancy, offering much more compact representations of geometry than with GeoJSON; typical TopoJSON files are 80% smaller than their GeoJSON equivalents. In addition, TopoJSON facilitates applications that use topology, such as topology-preserving shape simplification, automatic map coloring, and cartograms.”&lt;/em&gt; (i.e. compact TIN-representations!).&lt;br&gt;
&lt;a href=&#34;https://github.com/mbostock/topojson&#34;&gt;https://github.com/mbostock/topojson&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Germany: SIG 3D&lt;/strong&gt;&lt;br&gt;
Germany-based 3D interest group. Started already very early (2002) with 3D geospatial and has a long history. Many useful resources for both standards and implementations can be found via their websites.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;“Three-dimensional models of cities and regions play an important role in major applications of architecture, urban planning, surveying, mobile telecommunication or facility management. In the environmental sector 3D city models enable the simulation of noise and exhaust emissions as well as predictions on city climate change affecting a city. Concerning disaster situations like floods, 3D landscape models can help to analyse the affected areas and buildings.”&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;“Since the beginning of 2010 SIG 3D is part of the German Spatial Data Infrastructure (GDI-DE) and coordinates this context the national and international network of 3D activities.”&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.sig3d.org/&#34;&gt;http://www.sig3d.org/&lt;/a&gt;&lt;br&gt;
Several standards like OGC CityGML W3DS, later 3DPS had their origins here.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The Netherlands: Doorbraak 3D (Breakthrough 3D)&lt;/strong&gt;&lt;br&gt;
3D initiative within The Netherlands as a follow-up on earlier successful 3D projects like the 3D-Pilot: &lt;a href=&#34;http://www.geonovum.nl/documenten/rapport-eindrapportages-3d-pilot-nl-eerste-fase&#34;&gt;http://www.geonovum.nl/documenten/rapport-eindrapportages-3d-pilot-nl-eerste-fase&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;As a follow-up (2011) of the 3D-Pilot the public standard CityGML-IMGeo was developed. Basically this standardizes detailed smallscale/detailed topography using and extending CityGML: &lt;a href=&#34;http://www.geonovum.nl/wegwijzer/standaarden/gegevenscatalogus-imgeo-versie-211&#34;&gt;http://www.geonovum.nl/wegwijzer/standaarden/gegevenscatalogus-imgeo-versie-211&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;History of 3D geo in The Netherlands: &lt;a href=&#34;http://www.geonovum.nl/onderwerpen/3d-geo-informatie/historie-3d-geo-informatie-nl&#34;&gt;http://www.geonovum.nl/onderwerpen/3d-geo-informatie/historie-3d-geo-informatie-nl&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Now (Jan 2015) starting up a next phase called “3D Doorbraak”, with a recent working conference for establishing the 3D roadmap for The Netherlands: &lt;a href=&#34;http://www.geonovum.nl/nieuws/werkconferentie-voor-opstellen-roadmap-3d-doorbraak&#34;&gt;http://www.geonovum.nl/nieuws/werkconferentie-voor-opstellen-roadmap-3d-doorbraak&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The choice of standards plays an important part.&lt;/p&gt;
&lt;p&gt;See also news items via Twitter (#doorbraak3D): &lt;a href=&#34;https://twitter.com/search?q=%23doorbraak3D&amp;amp;src=typd&#34;&gt;https://twitter.com/search?q=%23doorbraak3D&amp;amp;src=typd&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;BIM – IFC&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Now that geospatial information is obtaining more detail and moving into 3D, integration with standards within the Building and infrastructure industry is one of the most obvious use-cases. Building Information Modelling or BIM is a huge standardization effort within the Building and infrastructure domain.&lt;/p&gt;
&lt;p&gt;Geoff ,”Between The Poles”, Zeiss blogs regularly on BIM and Geospatial: &lt;a href=&#34;http://geospatial.blogs.com/geospatial/bim/&#34;&gt;http://geospatial.blogs.com/geospatial/bim/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;“Building information modeling&lt;/strong&gt; (&lt;strong&gt;BIM&lt;/strong&gt;) is a process involving the generation and management of digital representations of physical and functional characteristics of places. &lt;strong&gt;Building information models&lt;/strong&gt; (&lt;strong&gt;BIMs&lt;/strong&gt;) are files (often but not always in proprietary formats and containing proprietary data) which can be exchanged or networked to support decision-making about a place. Current BIM software is used by individuals, businesses and government agencies who plan, design, construct, operate and maintain diverse physical infrastructures, such as water, wastewater, electricity, gas, refuse and communication utilities, roads, bridges and ports, houses, apartments, schools and shops, offices, factories, warehouses and prisons.”&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Source: &lt;a href=&#34;http://en.wikipedia.org/wiki/Building_information_modeling&#34;&gt;http://en.wikipedia.org/wiki/Building_information_modeling&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;For information exchange the Industry Foundation Classes are put forward.&lt;/p&gt;
&lt;p&gt;“The &lt;em&gt;Industry Foundation Classes (IFC) data model is intended to describe building and construction industry data.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;It is a platform neutral, open file format specification that is not controlled by a single vendor or group of vendors. It is an object-based file format with a data model developed bybuildingSMART (formerly the International Alliance for Interoperability, IAI) to facilitate interoperability in the architecture, engineering and construction (AEC) industry, and is a commonly used collaboration format in Building information modeling (BIM) based projects. The IFC model specification is open and available.[1] It is registered by ISO and is an official International Standard ISO 16739:2013.”&lt;/em&gt;&lt;br&gt;
Source: &lt;a href=&#34;http://en.wikipedia.org/wiki/Industry_Foundation_Classes&#34;&gt;http://en.wikipedia.org/wiki/Industry_Foundation_Classes&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;More: &lt;a href=&#34;http://www.ifcwiki.org/index.php/Main_Page&#34;&gt;http://www.ifcwiki.org/index.php/Main_Page&lt;/a&gt;&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>3D Geospatial – Free and Open Source Software v0</title>
      <link>https://nl.justobjects.org/3d-geospatial-foss-v0/</link>
      <pubDate>Wed, 28 Jan 2015 11:52:34 +0000</pubDate>
      
      <guid>https://nl.justobjects.org/3d-geospatial-foss-v0/</guid>
      <description>
        
          &lt;p&gt;This is my list of FOSS products for 3D Geospatial with a focus on web technology/WebGL and Open Standards. These are notes I keep within Evernote as part of the 3D Geospatial Notebook whose public link is: &lt;a href=&#34;https://www.evernote.com/pub/justb4ever/3d-geospatial&#34;&gt;https://www.evernote.com/pub/justb4ever/3d-geospatial&lt;/a&gt;. This is also the first experiment to auto sync Evernote to WordPress using Zapier, so beware of any glitches in formatting! I am sure I have missed many other great products. Let me know!&lt;/p&gt;
&lt;h3 id=&#34;oslandia&#34;&gt;OSLandia&lt;/h3&gt;
&lt;p&gt;OSLandia from Paris, France  is one of the most active companies contributing to 3D Geospatial FOSS.
&lt;a href=&#34;http://www.oslandia.com/&#34;&gt;http://www.oslandia.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.oslandia.com/postgis-3d-foss4g-video-and-workshop-en.html&#34;&gt;http://www.oslandia.com/postgis-3d-foss4g-video-and-workshop-en.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;– The latest PostGIS and QGIS 3D enhancements presented at &lt;a href=&#34;http://2013.foss4g.org/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;FOSS4G&lt;/a&gt;
 by Oslandia – GIS goes 3D : an OpenSource stack – Olivier Courtin – FOSS4G 2014&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://vimeo.com/106846660&#34;&gt;http://vimeo.com/106846660&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;cesium&#34;&gt;Cesium&lt;/h3&gt;
&lt;p&gt;– General&lt;/p&gt;
&lt;p&gt;&lt;em&gt;“Cesium is a JavaScript library for creating 3D globes and 2D maps in a web browser without a plugin. It uses WebGL for hardware-accelerated graphics, and is cross-platform, cross-browser, and tuned for dynamic-data visualization. Cesium is open source under the Apache 2.0 license. It is free for commercial and non-commercial use.”&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://nl.justobjects.org/uploads/2015/01/cesium.png&#34; alt=&#34; &#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://cesiumjs.org/&#34;&gt;http://cesiumjs.org/&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;http://cesiumjs.org/presentations/Rendering%20the%20Whole%20Wide%20World%20on%20the%20World%20Wide%20Web.pdf&#34;&gt;http://cesiumjs.org/presentations/Rendering%20the%20Whole%20Wide%20World%20on%20the%20World%20Wide%20Web.pdf&lt;/a&gt; great presentation&lt;/p&gt;
&lt;p&gt;– Cesium Terrain Service Preparation&lt;br&gt;
&lt;a href=&#34;https://github.com/giohappy/gdal2cesium&#34;&gt;https://github.com/giohappy/gdal2cesium&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;https://github.com/kaktus40/Cesium-GeoserverTerrainProvider&#34;&gt;https://github.com/kaktus40/Cesium-GeoserverTerrainProvider&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;– Creating 3D terrains with Cesium – Bjørn Sandvik&lt;br&gt;
&lt;a href=&#34;http://blog.thematicmapping.org/2014/10/3d-terrains-with-cesium.html&#34;&gt;http://blog.thematicmapping.org/2014/10/3d-terrains-with-cesium.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;– Migrating from Google Earth to Cesium&lt;br&gt;
&lt;em&gt;This is a guest post by Greg Angevine, Founder of &lt;a href=&#34;http://cubecities.com/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Cube Cities Inc&lt;/a&gt;
. His company has used the Google Earth plugin for years and has recently built impressive work with Cesium (like &lt;a href=&#34;https://twitter.com/CesiumJS/status/552845347484364800&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;this&lt;/a&gt;
)&lt;/em&gt;&lt;br&gt;
&lt;a href=&#34;http://cesiumjs.org/2015/01/27/Migrating-from-Earth-to-Cesium/&#34;&gt;http://cesiumjs.org/2015/01/27/Migrating-from-Earth-to-Cesium/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;– Cesium and OpenLayers3&lt;br&gt;
Cesium has a real focus on (OGC) standards and integrating with software implementing OGC standards. I heard that the Cesium-folks are even proposing additions to OGC 3D standards (CZML? or the very compact terrain tiling using quantized mesh?). That would be great in concert with/as payload for the upcoming 3DPS (3D Portrayal Service) standard.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://nl.justobjects.org/uploads/2015/01/cesium-ol3.png&#34; alt=&#34; &#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://openlayers.org/ol3-cesium/&#34;&gt;http://openlayers.org/ol3-cesium/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;– My Cesium experiments with Dutch OpenTopo tiles and Top10NL-3D Vector&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://nl.justobjects.org/uploads/2015/01/cesium-just.png&#34; alt=&#34; &#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://app.nlextract.nl/3d/&#34;&gt;http://app.nlextract.nl/3d/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;– My Cesium experiments with Cesium-OpenLayers3 Integration using Dutch Topo Top10NL-3D Vector&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://nl.justobjects.org/uploads/2015/01/cesium-ol3-just.png&#34; alt=&#34; &#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://app.nlextract.nl/3d/&#34;&gt;http://app.nlextract.nl/3d/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;tangram&#34;&gt;Tangram&lt;/h3&gt;
&lt;p&gt;From the folks from &lt;a href=&#34;http://mapzen.com&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;MapZen&lt;/a&gt;
 who make much more cool stuff: &lt;em&gt;“Tangram is a library for rendering 2D &amp;amp; 3D maps with WebGL, using GeoJSON/TopoJSON or binary vector tiles.”&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://nl.justobjects.org/uploads/2015/01/tangram.png&#34; alt=&#34; &#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/tangrams/tangram&#34;&gt;https://github.com/tangrams/tangram&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;https://mapzen.com/tangram&#34;&gt;https://mapzen.com/tangram&lt;/a&gt; (demo)&lt;/p&gt;
&lt;h3 id=&#34;d3js&#34;&gt;D3JS&lt;/h3&gt;
&lt;p&gt;– General&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://nl.justobjects.org/uploads/2015/01/d3js.png&#34; alt=&#34; &#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;“ &lt;strong&gt;D3.js&lt;/strong&gt; is a JavaScript library for manipulating documents based on data. &lt;strong&gt;D3&lt;/strong&gt; helps you bring data to life using HTML, SVG and CSS. D3’s emphasis on web standards gives you the full capabilities of modern browsers without tying yourself to a proprietary framework, combining powerful visualization components and a data-driven approach to DOM manipulation.”&lt;/em&gt;&lt;br&gt;
&lt;a href=&#34;http://d3js.org/&#34;&gt;http://d3js.org/&lt;/a&gt; –&lt;/p&gt;
&lt;p&gt;– Kind of 3D with D3 – Maps for the Web&lt;br&gt;
&lt;a href=&#34;http://www.web-maps.com/gisblog/?p=1370&#34;&gt;http://www.web-maps.com/gisblog/?p=1370&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;– Creating Charts and Legends for 3D Atlas Maps – A Mashup of D3.js, osgEarth, and the Chromium Embedded Framework — Raimu&lt;br&gt;
&lt;a href=&#34;http://vimeo.com/106234276&#34;&gt;http://vimeo.com/106234276&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;postgis&#34;&gt;PostGIS&lt;/h3&gt;
&lt;p&gt;PostGIS has many 3D facilities. Check these out.&lt;/p&gt;
&lt;p&gt;– Lidar/Pointclouds in PostGIS:
&lt;a href=&#34;https://github.com/pgpointcloud/pointcloud&#34;&gt;https://github.com/pgpointcloud/pointcloud&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;http://workshops.boundlessgeo.com/tutorial-lidar/&#34;&gt;http://workshops.boundlessgeo.com/tutorial-lidar/&lt;/a&gt; (tutorial)&lt;br&gt;
&lt;a href=&#34;http://s3.cleverelephant.ca/foss4gna2013-pointcloud.pdf&#34;&gt;http://s3.cleverelephant.ca/foss4gna2013-pointcloud.pdf&lt;/a&gt; (paul ramsey slides)&lt;br&gt;
&lt;a href=&#34;http://boundlessgeo.com/2013/11/manage-lidar-postgis/&#34;&gt;http://boundlessgeo.com/2013/11/manage-lidar-postgis/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;– TIN Support&lt;br&gt;
&lt;a href=&#34;https://smathermather.wordpress.com/2013/12/18/2-5d-tins-in-postgis/&#34;&gt;https://smathermather.wordpress.com/2013/12/18/2-5d-tins-in-postgis/&lt;/a&gt; and&lt;br&gt;
&lt;a href=&#34;https://github.com/smathermather/postgis-etc/blob/master/3D/AsTin.sql&#34;&gt;https://github.com/smathermather/postgis-etc/blob/master/3D/AsTin.sql&lt;/a&gt; – create TINs with &lt;a href=&#34;http://postgis.net/docs/ST_DelaunayTriangles.html&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;ST_DelaunayTriangles&lt;/a&gt;
&lt;br&gt;
&lt;a href=&#34;http://www.oslandia.com/full-spatial-database-power-in-2-lines-en.html&#34;&gt;http://www.oslandia.com/full-spatial-database-power-in-2-lines-en.html&lt;/a&gt;&lt;br&gt;
also check: GRASS: &lt;a href=&#34;http://grass.osgeo.org/grass70/manuals/addons/v.delaunay3d.html&#34;&gt;http://grass.osgeo.org/grass70/manuals/addons/v.delaunay3d.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;– X3D Generation&lt;br&gt;
&lt;a href=&#34;http://postgis.net/docs/ST_AsX3D.html&#34;&gt;http://postgis.net/docs/ST_AsX3D.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;– 3ddb for PostGIS (CityGML)&lt;br&gt;
&lt;a href=&#34;http://www.3dcitydb.org/&#34;&gt;http://www.3dcitydb.org/&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;https://github.com/3dcitydb&#34;&gt;https://github.com/3dcitydb&lt;/a&gt; GitHub&lt;br&gt;
&lt;a href=&#34;http://www.3dcitydb.org/3dcitydb/fileadmin/downloaddata/3dcitydb-v2_0_6-postgis-tutorial.pdf&#34;&gt;http://www.3dcitydb.org/3dcitydb/fileadmin/downloaddata/3dcitydb-v2_0_6-postgis-tutorial.pdf&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;– A New Dimension To PostGIS : 3D – &lt;a href=&#34;http://2013.foss4g.org/conf/programme/people/250/index.html&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Olivier Courtin&lt;/a&gt;
 (Oslandia) with &lt;a href=&#34;http://2013.foss4g.org/conf/programme/people/139/index.html&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Hugo Mercier&lt;/a&gt;
 (Oslandia)&lt;br&gt;
&lt;a href=&#34;http://2013.foss4g.org/conf/programme/presentations/7/index.html&#34;&gt;http://2013.foss4g.org/conf/programme/presentations/7/index.html&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;http://www.slideshare.net/SimeonNedkov/postgis-3d-implementation&#34;&gt;http://www.slideshare.net/SimeonNedkov/postgis-3d-implementation&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;https://www.youtube.com/watch?v=tQbE6B8JaHI&#34;&gt;https://www.youtube.com/watch?v=tQbE6B8JaHI&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;– PostGIS and CGAL
CGAL &lt;a href=&#34;https://www.cgal.org/&#34;&gt;https://www.cgal.org/&lt;/a&gt; and &lt;a href=&#34;https://smathermather.wordpress.com/2013/12/05/postgis-with-sfcgal-videos-how-did-i-miss-these-videos/&#34;&gt;https://smathermather.wordpress.com/2013/12/05/postgis-with-sfcgal-videos-how-did-i-miss-these-videos/&lt;/a&gt;&lt;br&gt;
SFCGAL &lt;a href=&#34;http://www.sfcgal.org/&#34;&gt;http://www.sfcgal.org/&lt;/a&gt; “ &lt;em&gt;SFCGAL&lt;/em&gt; is a C++ wrapper library around &lt;em&gt;&lt;a href=&#34;http://www.cgal.org&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;CGAL&lt;/a&gt;
 with the aim of supporting ISO 19107:2013 and &lt;a href=&#34;http://www.opengeospatial.org/standards/sfa&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;OGC Simple Features Access 1.2&lt;/a&gt;
 for 3D operations.”&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;– Other PostGIS 3D Stuff&lt;br&gt;
&lt;em&gt;“This post explains how to setup a powerful spatial data store (PostGIS) with a wide range of features (SFCGAL, PgRouting, PostgreSQL PointCloud, PDAL)“&lt;/em&gt;&lt;br&gt;
&lt;a href=&#34;http://www.oslandia.com/full-spatial-database-power-in-2-lines-en.html&#34;&gt;http://www.oslandia.com/full-spatial-database-power-in-2-lines-en.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://postgis3d.blogspot.nl/&#34;&gt;http://postgis3d.blogspot.nl/&lt;/a&gt; (Camp2Camp – 2007 – by Mathieu ..?)&lt;/p&gt;
&lt;h3 id=&#34;xnavigator&#34;&gt;XNavigator&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;“XNavigator is an interactive 3D viewer and integrated client for exploring virtual city and landscape models. Instead of defining its own proprietary communication protocols, open OGC standards are used. The Open Geospatial Consortium (OGC) defines standards for accessing spatial information over the internet.  The main 3D content is downloaded from a Web 3D Service (W3DS).&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Additional OGC services which can be accessed include:&lt;/em&gt;&lt;br&gt;
&lt;em&gt;- Web Map Service (WMS)&lt;/em&gt;&lt;br&gt;
&lt;em&gt;- Open Location Services (OpenLS) including Route Service, Directory Service, and Geocoder&lt;/em&gt;&lt;br&gt;
&lt;em&gt;- Catalog Service for Web (CSW) ebRIM profile&lt;/em&gt;&lt;br&gt;
&lt;em&gt;- Web Feature Service (WFS) serving GML3 and CityGML content “&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://xnavigator.sourceforge.net/doku.php&#34;&gt;http://xnavigator.sourceforge.net/doku.php&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;threejs&#34;&gt;ThreeJS&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;“The aim of the project is to create a lightweight 3D library with a very low level of complexity — in other words, for dummies. The library provides &amp;lt;canvas&amp;gt;, &amp;lt;svg&amp;gt;, CSS3D and WebGL renderers.”&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://nl.justobjects.org/uploads/2015/01/threejs.png&#34; alt=&#34; &#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://threejs.org&#34;&gt;http://threejs.org&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;w3ds&#34;&gt;W3DS&lt;/h3&gt;
&lt;p&gt;W3DS (Web 3D Service) is a portrayal service for 3D scenes. Early OGC discussion documents. Now superseded by the 3DPS, the 3D Portrayal Service, now (jan 2015) out for public comment in OGC. This is an early W3DS implementation in GeoServer that started from the dissertation work by Nuno Miguel Carvalho Oliveira (professor: Jorge Gustavo Rocha) at the University of Minho (Portugal).&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://mei.di.uminho.pt/sites/default/files/dissertacoes//eeum_di_dissertacao_pg18391.pdf&#34;&gt;http://mei.di.uminho.pt/sites/default/files/dissertacoes//eeum_di_dissertacao_pg18391.pdf&lt;/a&gt; – Dissertation&lt;br&gt;
&lt;a href=&#34;https://github.com/geoserver/geoserver/tree/master/src/community/w3ds&#34;&gt;https://github.com/geoserver/geoserver/tree/master/src/community/w3ds&lt;/a&gt; – GeoServer community module&lt;br&gt;
&lt;a href=&#34;http://osgeo-org.1560.x6.nabble.com/W3DS-Implementation-up-and-running-td4665127.html&#34;&gt;http://osgeo-org.1560.x6.nabble.com/W3DS-Implementation-up-and-running-td4665127.html&lt;/a&gt; – email on GeoServer list&lt;/p&gt;
&lt;h3 id=&#34;qgishorao&#34;&gt;QGIS/Horao&lt;/h3&gt;
&lt;p&gt;By OSLandia&lt;/p&gt;
&lt;p&gt;&lt;em&gt;“A simple viewer built around OpenSceneGraph … designed to listen to commands on its standard input. … The other piece is a Python plugin that is used to connect QGIS signals to the viewer (in another process) to allow loading of QGIS layers with 3D geometries.”&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://nl.justobjects.org/uploads/2015/01/horao.png&#34; alt=&#34; &#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/Oslandia/horao&#34;&gt;https://github.com/Oslandia/horao&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;http://www.openscenegraph.org/&#34;&gt;http://www.openscenegraph.org/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;cuardo&#34;&gt;Cuardo&lt;/h3&gt;
&lt;p&gt;Again By OSLandia, watch these guys!&lt;br&gt;
&lt;em&gt;“ Cuardo is an OpenSource WebGL 3D data viewer, focusing on urban data analysis and visualization … a 3D GIS web framework based on Three.js and WebGL, oriented toward urban visualization.“&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://nl.justobjects.org/uploads/2015/01/cuardo.png&#34; alt=&#34; &#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/Oslandia/cuardo&#34;&gt;https://github.com/Oslandia/cuardo&lt;/a&gt;
&lt;a href=&#34;http://www.oslandia.com/oslandia-releases-cuardo-3d-gis-viewer-en.html&#34;&gt;http://www.oslandia.com/oslandia-releases-cuardo-3d-gis-viewer-en.html&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;suggestions-fromreaders&#34;&gt;Suggestions from Readers&lt;/h3&gt;
&lt;p&gt;After the first version I got quite some suggestions. Thanks!&lt;/p&gt;
&lt;p&gt;– Glob3Mobile – &lt;a href=&#34;https://twitter.com/DiegoGomezDeck&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;@DiegoGomezDeck&lt;/a&gt;
&lt;br&gt;
&lt;em&gt;“ G3M is a framework developed and designed to:&lt;/em&gt;&lt;br&gt;
&lt;em&gt;- Develop mobile maps apps in 2D, 2,5D and 3D&lt;/em&gt;&lt;br&gt;
&lt;em&gt;- Work with real time data&lt;/em&gt;&lt;br&gt;
&lt;em&gt;- Integrate any kind of data (format,size)&lt;/em&gt;&lt;br&gt;
&lt;em&gt;- Be integrated on any legacy system&lt;/em&gt;&lt;br&gt;
&lt;em&gt;- High performance mobile native development&lt;/em&gt;&lt;br&gt;
&lt;em&gt;- Multi Touch screens&lt;/em&gt;&lt;br&gt;
&lt;em&gt;- Face the problem of the mobile performance as an integrated problem between server &amp;amp; client&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Works on iOS, Android devices and HTML5 environments. “&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.glob3mobile.com/&#34;&gt;http://www.glob3mobile.com/&lt;/a&gt;&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Into the Weather – Part 3 – Publishing Data to the Cloud – 1</title>
      <link>https://nl.justobjects.org/into-the-weather-part-3/</link>
      <pubDate>Mon, 15 Dec 2014 23:19:17 +0000</pubDate>
      
      <guid>https://nl.justobjects.org/into-the-weather-part-3/</guid>
      <description>
        
          &lt;p&gt;In my last post, &lt;a href=&#34;https://nl.justobjects.org/into-the-weather-part-2-fun-with-raspberry-pi/&#34;&gt;Into the Weather – Part 2&lt;/a&gt;
, I outlined a global architecture of a &lt;a href=&#34;http://www.davisnet.com/weather/products/vantage-pro-professional-weather-stations.asp&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Davis Vantage Pro2&lt;/a&gt;
 weather station connected to a &lt;a href=&#34;http://www.raspberrypi.org/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Raspberry Pi&lt;/a&gt;
 (RPi) running &lt;a href=&#34;http://www.weewx.com/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;weewx&lt;/a&gt;
 weather software to capture raw weather data. Here I will try to depict how to bring this weather data “from the &lt;a href=&#34;http://en.wikipedia.org/wiki/Little_Fluffy_Clouds&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;fluffy clouds&lt;/a&gt;
 into the digital cloud”. Finally, at the end, also some geospatial content. The image below shows the weather station sensors at the Geonovum building rooftop (was quite hazardous replacing a faulty temperature sensor there!) and the Davis console connected to the Raspberry Pi (transparent enclosure). All documentation and code can be found via: &lt;a href=&#34;http://sospilot.readthedocs.org&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;sospilot.readthedocs.org&lt;/a&gt;
.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://nl.justobjects.org/uploads/2014/12/davis-pws-geonovum-pics1.jpg&#34; alt=&#34; &#34;&gt;&lt;/p&gt;
&lt;p&gt;To recap: the &lt;a href=&#34;http://www.davisnet.com/weather/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Davis Weather Station&lt;/a&gt;
 continuously captures raw weather data through its sensors: temperature (out/in), pressure, wind (speed, direction), rainfall and even UV-radiation. This data is initially gathered within the local console display. This is fine for personal/local usage, but for capturing history, deriving trends and in particular for external sharing this is quite limited. The real fun starts with getting access to the raw data and go from there.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://nl.justobjects.org/uploads/2014/11/weather-hw-setup.png&#34; alt=&#34; &#34;&gt;&lt;/p&gt;
&lt;p&gt;This is where the Raspberry Pi with weewx and later &lt;a href=&#34;http://www.stetl.org&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Stetl&lt;/a&gt;
, PostGIS, GeoServer and the 52North SOS come in, but I’ll go step-by-step. Let’s first see how we can publish weather data with just weewx.&lt;/p&gt;
&lt;p&gt;My first post &lt;a href=&#34;https://nl.justobjects.org/into-the-weather-part-1/&#34;&gt;Into the Weather – Part 1&lt;/a&gt;
 in this series introduced weewx, a Python framework for capturing, storing and publishing weather data. The Davis weather station is connected via USB to the RPi. The RPi runs &lt;a href=&#34;http://www.weewx.com/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;weewx&lt;/a&gt;
 to gather and store weather data (in a SQLite DB) from the weather station. But weewx can do more than this: it can also publish weather data to a variety of services. As any well-designed framework, weewx is basically a kernel, the &lt;em&gt;weewx engine&lt;/em&gt; with configurable plugins, all specified and parameterized from a single configuration file &lt;em&gt;weewx.conf&lt;/em&gt;, like in &lt;a href=&#34;https://github.com/Geonovum/sospilot/blob/master/src/weewx/davis/weewx.conf&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;this example&lt;/a&gt;
. The &lt;em&gt;weewx daemon&lt;/em&gt; process runs forever in a main loop continuously calling on all plugins.&lt;/p&gt;
&lt;p&gt;First there are &lt;em&gt;weewx station-drivers&lt;/em&gt; that continuously capture raw data from most common weather stations. Although there are many brands of weather stations, many will share common hardware and protocols. The second class of plugins are &lt;em&gt;archiving drivers&lt;/em&gt;, where/how to store raw weather data. Two standard archiving drivers are available: SQLite and MySQL. My choice: SQLite. For publication from archived data, a &lt;em&gt;standard reporting driver&lt;/em&gt; generates a plain HTML website using an extensible &lt;em&gt;skin containing (HTML) templates&lt;/em&gt;. By configuring an FTP or &lt;em&gt;rsync&lt;/em&gt; destination, the generated HTML can be published to a remote webserver. This is the first connection to the digital cloud. Off course the skin and templates are highly configurable &lt;a href=&#34;https://github.com/Geonovum/sospilot/tree/master/src/weewx/davis/byteweather&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;as in this example&lt;/a&gt;
. Many examples can be found on the web. I found the nice &lt;a href=&#34;http://davies-barnard.co.uk/2014/01/weewx-byteweather-template&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;byteweather-template by Chris Davies-Barnard&lt;/a&gt;
. Below is the result as can be found at: &lt;a href=&#34;http://sensors.geonovum.nl/weewx&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;sensors.geonovum.nl/weewx&lt;/a&gt;
.&lt;/p&gt;

&lt;div class=&#34;&#34;&gt;
  &lt;a href=&#34;http://sensors.geonovum.nl/weewx/&#34;&gt;
    &lt;img class=&#34;lazy&#34;
      src=&#34;https://nl.justobjects.org/uploads/2014/12/weewx-geonovum-screen1.png&#34;
      alt=&#34;Weewx Standard Report&#34; /&gt;
  &lt;/a&gt;
  
&lt;/div&gt;

&lt;p&gt;In addition, I’ve added even a more dynamic weather display like the &lt;a href=&#34;http://wiki.sandaysoft.com/a/SteelSeries_Gauges&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Steelseries Gauges&lt;/a&gt;
, as seen below and via the link &lt;a href=&#34;http://sensors.geonovum.nl/weewx/gauges/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;sensors.geonovum.nl/weewx/gauges&lt;/a&gt;
.&lt;/p&gt;

&lt;div class=&#34;&#34;&gt;
  &lt;a href=&#34;http://sensors.geonovum.nl/weewx/gauges/index.html&#34;&gt;
    &lt;img class=&#34;lazy&#34;
      src=&#34;https://nl.justobjects.org/uploads/2014/12/weewx-geonovum-gauges-screen1.png&#34;
      alt=&#34;&#34; /&gt;
  &lt;/a&gt;
  
&lt;/div&gt;

&lt;p&gt;Just like other crowd-sourced projects like OpenStreetMap and WikiPedia there are various weather  communities where you can join and publish your weather data via RESTful APIs. weewx provides drivers for most common communities like &lt;a href=&#34;http://www.wunderground.com/wundermap?lat=52.152&amp;amp;lon=5.372&amp;amp;zoom=13&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Weather Underground&lt;/a&gt;
 and &lt;a href=&#34;http://pwsweather.com/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;PWSWeather&lt;/a&gt;
. For example, I registered the Geonovum weather station as  &lt;a href=&#34;http://www.wunderground.com/personal-weather-station/dashboard?ID=IUTRECHT96&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Geonovum IUTRECHT96&lt;/a&gt;
 as below.&lt;/p&gt;

&lt;div class=&#34;&#34;&gt;
  &lt;a href=&#34;http://www.wunderground.com/personal-weather-station/dashboard?ID=IUTRECHT96&#34;&gt;
    &lt;img class=&#34;lazy&#34;
      src=&#34;https://nl.justobjects.org/uploads/2014/12/wu-geonovum-pws1.png&#34;
      alt=&#34;&#34; /&gt;
  &lt;/a&gt;
  
&lt;/div&gt;

&lt;p&gt;Weather Underground also provides various apps and a map, the &lt;a href=&#34;http://www.wunderground.com/wundermap?lat=52.152&amp;amp;lon=5.372&amp;amp;zoom=13&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;WunderMap&lt;/a&gt;
. Here you can view your station, together with all others that jointly provide weather data. As can be seen there is already quite some coverage within The Netherlands.&lt;/p&gt;

&lt;div class=&#34;&#34;&gt;
  &lt;a href=&#34;http://www.wunderground.com/wundermap?lat=52.152&amp;amp;lon=5.372&amp;amp;zoom=13&#34;&gt;
    &lt;img class=&#34;lazy&#34;
      src=&#34;https://nl.justobjects.org/uploads/2014/12/wundermap-nl1.png&#34;
      alt=&#34;&#34; /&gt;
  &lt;/a&gt;
  
&lt;/div&gt;

&lt;p&gt;All in all, there is a fascinating world to explore once you get into the weather domain and its many communities.&lt;/p&gt;
&lt;p&gt;So why am I doing all of this? Apart from having the opportunity to develop this as part of the &lt;a href=&#34;http://sospilot.readthedocs.org&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;SOSPilot Project at Geonovum&lt;/a&gt;
, I think that “geospatial” is moving from 2D to “N-dimensional”: not only more and more “3D”  is hitting the shores (just see the recent 2014 blogs at &lt;a href=&#34;http://planet.osgeo.org/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;planet.osgeo.org&lt;/a&gt;
), but also location-based sensor data (like Air Quality and weather data) and the &lt;a href=&#34;http://en.wikipedia.org/wiki/Internet_of_Things&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Internet of Things&lt;/a&gt;
 drives a need to deal with time-series data: management, storage, services and visualization. Within the Open Source geospatial world I happily see that many frameworks and tools are extended to deal with 3D, like &lt;a href=&#34;http://openlayers.org/ol3-cesium/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;OpenLayers/Cesium&lt;/a&gt;
 (one of my next posts) and &lt;a href=&#34;http://boundlessgeo.com/2013/11/manage-lidar-postgis/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;PostGIS/PDAL&lt;/a&gt;
 and with Time like in &lt;a href=&#34;http://docs.geoserver.org/latest/en/user/services/wms/time.html&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;GeoServer Dimension&lt;/a&gt;
 support. Also the &lt;a href=&#34;http://www.opengeospatial.org/ogc/markets-technologies/swe&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;OGC Sensor Web Enablement&lt;/a&gt;
 and its lighter-weight version &lt;a href=&#34;http://ogc-iot.github.io/ogc-iot-api/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;OGC SensorThings&lt;/a&gt;
 is gaining more attention.&lt;/p&gt;
&lt;p&gt;Not yet done with the weather. Next post I will dive into further unlocking weather data via OGC services like WMS and SOS. That would be “Publishing Data to Cloud 9” ;-)&lt;/p&gt;

        
      </description>
    </item>
    
  </channel>
</rss>
